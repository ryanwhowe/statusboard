<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Calendar;
use \DateTime;
use Doctrine\ORM\Repository\RepositoryFactory;

/**
 * CalendarRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CalendarRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Return the events that are happening this week
     *
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    public function findAllThisWeek(){
        $connection = $this->getEntityManager()->getConnection();

        /* This is to deal with the quirk of sqlite and the way it handles week numbers */
        $sql = "
            SELECT
                id,
                type,
                event_date,
                strftime('%Y-%W', `event_date`),
                CAST(strftime('%Y','now')+1 AS TEXT) || '-00'
            FROM
                calendar
            WHERE
                strftime('%Y-%W', `event_date`) = strftime('%Y-%W', 'now')
               OR
                (
                    (
                        strftime('%W', 'now') = '53' 
                            AND
                        strftime('%Y-%W', `event_date`) = CAST(strftime('%Y', 'now') + 1 AS TEXT) || '-00'
                    )
        
                        OR
                    (
                        strftime('%W','now') = '00' 
                            AND 
                        strftime('%Y-%W', `event_date`) = CAST(strftime('%Y', 'now') - 1 AS TEXT) || '-53'
                    )
                )
        ";

        $stmt = $connection->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Get the next calendar occurrence of the passed event type
     *
     * @param integer $eventType The event type to search for a next occurrence of
     *
     * @return Calendar[]
     */
    public function getNextEvent($eventType){
        $entityManager = $this->getEntityManager();

        $query = $entityManager->createQuery(
            'SELECT c
                 FROM AppBundle\Entity\Calendar c
                 WHERE c.eventDate > CURRENT_DATE() AND c.type = :type'
        )->setParameters(
            [
                'type'=> $eventType
            ]
        )->setMaxResults(1);

        return $query->execute();
    }

    /**
     * @return array
     * @throws \Exception
     */
    public function getMinMaxEventDates(){
        $query = $this->getEntityManager()->createQuery(
            '
            SELECT min(c.eventDate) as minEventDate, max(c.eventDate) as maxEventDate
            FROM AppBundle\Entity\Calendar c
            ')->setMaxResults(1);
        $return = $query->execute();
        return ['min' => new DateTime($return[0]['minEventDate']), 'max' => new DateTime($return[0]['maxEventDate'])];
    }
}
